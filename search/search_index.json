{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AeroViz Documentation","text":"<p>Welcome to the AeroViz documentation! AeroViz is a comprehensive Python package for processing and visualizing aerosol data.</p>"},{"location":"#core-features","title":"Core Features","text":"<p>AeroViz provides three main APIs for aerosol data processing and visualization:</p>"},{"location":"#1-rawdatareader","title":"1. RawDataReader","text":"<p>A factory function for reading and processing raw data from various aerosol instruments.</p> <pre><code>from AeroViz import RawDataReader\n\n# Example usage\ndata = RawDataReader(\n    instrument='AE33',\n    path='path/to/data',\n    start=datetime(2024, 1, 1),\n    end=datetime(2024, 12, 31)\n)\n</code></pre> <p>Learn more about RawDataReader</p>"},{"location":"#2-dataprocess","title":"2. DataProcess","text":"<p>Tools for advanced data processing and analysis.</p> <pre><code>from AeroViz import DataProcess\n\n# Example usage\nprocessor = DataProcess(data)\nprocessed_data = processor.process()\n</code></pre> <p>Learn more about DataProcess</p>"},{"location":"#3-plot","title":"3. Plot","text":"<p>Visualization tools for creating publication-quality plots.</p> <pre><code>from AeroViz import plot\n\n# Example usage\nplot.time_series(data, 'BC')\n</code></pre> <p>Learn more about Plot</p>"},{"location":"#supported-instruments","title":"Supported Instruments","text":"<p>AeroViz supports a wide range of aerosol instruments through the RawDataReader API:</p> <ul> <li>AE33 Aethalometer</li> <li>AE43 Aethalometer</li> <li>BC1054 Black Carbon Monitor</li> <li>MA350 MicroAeth</li> <li>SMPS</li> <li>NEPH</li> <li>And more...</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from datetime import datetime\nfrom pathlib import Path\nfrom AeroViz import RawDataReader, DataProcess, plot\n\n# Read data\ndata = RawDataReader(\n    instrument='AE33',\n    path=Path('/path/to/data'),\n    start=datetime(2024, 1, 1),\n    end=datetime(2024, 12, 31)\n)\n\n# Process data\nprocessor = DataProcess(data)\nprocessed_data = processor.process()\n\n# Create visualization\nplot.time_series(processed_data, 'BC')\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install AeroViz\n</code></pre>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#feat","title":"Feat","text":"<ul> <li>Implement multi-version Python testing support</li> </ul>"},{"location":"CHANGELOG/#v0116-2025-02-20","title":"v0.1.16 (2025-02-20)","text":""},{"location":"CHANGELOG/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>Complete overhaul from v0.1.9.0 to v0.1.11</li> </ul>"},{"location":"CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>enhance rate calculation to use minimum rates across all determinant keys</li> <li>workflow: add unpublish.yml</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>repair TEOM parsing and optical scatter key errors</li> <li>improve time handling for instrument data and reporting</li> <li>improve aerosol data processing and quality control</li> <li>improve aerosol data processing and quality control</li> <li>RawDataReader and the ReaderLogger class to better handle different environments and edge cases</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>RawDataReader: simplify configuration and unify output handling</li> </ul>"},{"location":"home/","title":"AeroViz","text":"<p>AeroViz \u662f\u4e00\u500b\u7528\u65bc\u6c23\u6eb6\u81a0\u6578\u64da\u8655\u7406\u548c\u53ef\u8996\u5316\u7684 Python \u5eab\u3002</p>"},{"location":"home/#_1","title":"\u529f\u80fd\u7279\u9ede","text":"<ul> <li>\u652f\u6301\u591a\u7a2e\u6c23\u6eb6\u81a0\u5100\u5668\u7684\u6578\u64da\u8b80\u53d6</li> <li>\u81ea\u52d5\u5316\u7684\u6578\u64da\u8cea\u91cf\u63a7\u5236</li> <li>\u8c50\u5bcc\u7684\u6578\u64da\u53ef\u8996\u5316\u529f\u80fd</li> <li>\u9748\u6d3b\u7684\u6578\u64da\u8655\u7406\u6d41\u7a0b</li> </ul>"},{"location":"home/#_2","title":"\u5feb\u901f\u958b\u59cb","text":"<ol> <li>\u5b89\u88dd AeroViz\uff1a</li> </ol> <pre><code>pip install aeroviz\n</code></pre> <ol> <li>\u5c0e\u5165\u4e26\u4f7f\u7528\uff1a</li> </ol> <pre><code>from AeroViz import RawDataReader\n\n# \u5275\u5efa\u8b80\u53d6\u5668\u5be6\u4f8b\nreader = RawDataReader()\n\n# \u8b80\u53d6\u6578\u64da\ndata = reader.read(\"path/to/data.txt\")\n</code></pre>"},{"location":"home/#_3","title":"\u6587\u6a94","text":"<ul> <li>\u7528\u6236\u6307\u5357</li> <li>API \u53c3\u8003</li> <li>\u5100\u5668\u6982\u8ff0</li> </ul>"},{"location":"home/#_4","title":"\u793a\u4f8b","text":"<p>\u67e5\u770b\u6211\u5011\u7684\u793a\u4f8b\u4ee3\u78bc\uff1a</p> <ul> <li>\u6578\u64da\u8b80\u53d6\u793a\u4f8b</li> <li>\u7e6a\u5716\u793a\u4f8b</li> </ul>"},{"location":"home/#_5","title":"\u958b\u767c","text":"<p>AeroViz \u662f\u4e00\u500b\u958b\u6e90\u9805\u76ee\uff0c\u6b61\u8fce\u8ca2\u737b\u4ee3\u78bc\u548c\u63d0\u51fa\u5efa\u8b70\u3002</p>"},{"location":"api/","title":"API \u53c3\u8003","text":"<p>\u672c\u7bc0\u63d0\u4f9b AeroViz \u7684 API \u53c3\u8003\u6587\u6a94\u3002</p>"},{"location":"api/#_1","title":"\u6838\u5fc3\u6a21\u584a","text":""},{"location":"api/#rawdatareader","title":"RawDataReader","text":"<p>\u7528\u65bc\u8b80\u53d6\u539f\u59cb\u6578\u64da\u7684\u6a21\u584a\u3002</p> <ul> <li>RawDataReader \u6307\u5357</li> <li>\u6578\u64da\u8655\u7406\u6307\u5357</li> <li>\u7e6a\u5716\u6307\u5357</li> </ul>"},{"location":"api/#_2","title":"\u5100\u5668\u652f\u6301","text":"<p>AeroViz \u652f\u6301\u591a\u7a2e\u5100\u5668\u7684\u6578\u64da\u8b80\u53d6\uff1a</p> <ul> <li>AE33</li> <li>AE43</li> <li>BC1054</li> <li>MA350</li> </ul>"},{"location":"api/#_3","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from AeroViz.rawDataReader import RawDataReader\n\n# \u5275\u5efa\u8b80\u53d6\u5668\u5be6\u4f8b\nreader = RawDataReader()\n\n# \u8b80\u53d6\u6578\u64da\ndata = reader.read(\"path/to/data.txt\")\n</code></pre>"},{"location":"api/#_4","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u6240\u6709\u6642\u9593\u5e8f\u5217\u6578\u64da\u90fd\u4f7f\u7528 pandas \u7684 DatetimeIndex</li> <li>\u6578\u64da\u8cea\u91cf\u63a7\u5236\u53c3\u6578\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8a2d\u7f6e</li> <li>\u652f\u6301\u81ea\u5b9a\u7fa9\u6578\u64da\u8655\u7406\u6d41\u7a0b</li> </ul>"},{"location":"api/#dataprocess","title":"DataProcess","text":"<p>Class for advanced data processing and analysis.</p> <pre><code>from AeroViz import DataProcess\n\nprocessor = DataProcess(data)\nprocessed_data = processor.process()\n</code></pre> <p>View DataProcess Documentation</p>"},{"location":"api/#plot","title":"plot","text":"<p>Module for creating publication-quality visualizations.</p> <pre><code>from AeroViz import plot\n\nplot.time_series(data, 'BC')\nplot.scatter(data, 'BC', 'PM2.5')\n</code></pre> <p>View Plot Documentation</p>"},{"location":"api/#common-parameters","title":"Common Parameters","text":""},{"location":"api/#time-range-parameters","title":"Time Range Parameters","text":"<ul> <li><code>start</code> (datetime): Start time for data processing</li> <li><code>end</code> (datetime): End time for data processing</li> <li><code>mean_freq</code> (str): Time frequency for averaging (e.g., '1h', '1D')</li> </ul>"},{"location":"api/#data-processing-parameters","title":"Data Processing Parameters","text":"<ul> <li><code>qc</code> (str): Quality control level ('1MS', '1D', '1W')</li> <li><code>reset</code> (bool): Whether to reset previous processing</li> </ul>"},{"location":"api/#plot-parameters","title":"Plot Parameters","text":"<ul> <li><code>variables</code> (list): Variables to plot</li> <li><code>title</code> (str): Plot title</li> <li><code>figsize</code> (tuple): Figure size</li> <li><code>style</code> (str): Plot style</li> </ul>"},{"location":"api/#return-values","title":"Return Values","text":""},{"location":"api/#rawdatareader_1","title":"RawDataReader","text":"<p>Returns a pandas DataFrame containing:</p> <ul> <li>Timestamp index</li> <li>Instrument-specific measurements</li> <li>Quality control flags</li> <li>Metadata</li> </ul>"},{"location":"api/#dataprocess_1","title":"DataProcess","text":"<p>Returns a processed DataFrame with:</p> <ul> <li>Cleaned data</li> <li>Transformed values</li> <li>Statistical summaries</li> <li>Quality metrics</li> </ul>"},{"location":"api/#plot_1","title":"plot","text":"<p>Returns matplotlib figure objects that can be:</p> <ul> <li>Displayed directly</li> <li>Saved to files</li> <li>Further customized </li> </ul>"},{"location":"guide/DataProcess/","title":"DataProcess Documentation","text":""},{"location":"guide/DataProcess/#overview","title":"Overview","text":"<p>DataProcess is a class for advanced data processing and analysis of aerosol data. It provides methods for data cleaning, transformation, and statistical analysis.</p>"},{"location":"guide/DataProcess/#basic-usage","title":"Basic Usage","text":"<pre><code>from AeroViz import DataProcess\n\n# Initialize with data from RawDataReader\nprocessor = DataProcess(data)\n\n# Process the data\nprocessed_data = processor.process()\n</code></pre>"},{"location":"guide/DataProcess/#methods","title":"Methods","text":""},{"location":"guide/DataProcess/#process","title":"process()","text":"<p>Process the input data with default settings.</p> <pre><code>processed_data = processor.process()\n</code></pre>"},{"location":"guide/DataProcess/#clean_data","title":"clean_data()","text":"<p>Clean the data by removing outliers and filling missing values.</p> <pre><code>cleaned_data = processor.clean_data()\n</code></pre>"},{"location":"guide/DataProcess/#transform","title":"transform()","text":"<p>Transform the data (e.g., log transformation).</p> <pre><code>transformed_data = processor.transform()\n</code></pre>"},{"location":"guide/DataProcess/#analyze","title":"analyze()","text":"<p>Perform statistical analysis on the data.</p> <pre><code>analysis_results = processor.analyze()\n</code></pre>"},{"location":"guide/DataProcess/#parameters","title":"Parameters","text":"<ul> <li><code>data</code> (DataFrame): Input data from RawDataReader</li> <li><code>methods</code> (list): List of processing methods to apply</li> <li><code>params</code> (dict): Parameters for each processing method</li> </ul>"},{"location":"guide/DataProcess/#returns","title":"Returns","text":"<ul> <li>DataFrame: Processed data with applied transformations and cleaning</li> </ul>"},{"location":"guide/DataProcess/#examples","title":"Examples","text":""},{"location":"guide/DataProcess/#basic-processing","title":"Basic Processing","text":"<pre><code>from AeroViz import DataProcess\n\nprocessor = DataProcess(data)\nprocessed_data = processor.process()\n</code></pre>"},{"location":"guide/DataProcess/#custom-processing","title":"Custom Processing","text":"<pre><code>processor = DataProcess(\n    data,\n    methods=['clean', 'transform', 'analyze'],\n    params={\n        'clean': {'threshold': 3},\n        'transform': {'method': 'log'},\n        'analyze': {'window': '1D'}\n    }\n)\nprocessed_data = processor.process()\n</code></pre>"},{"location":"guide/DataProcess/#notes","title":"Notes","text":"<ul> <li>The DataProcess class is designed to work seamlessly with data from RawDataReader</li> <li>All processing methods are configurable through parameters</li> <li>Results can be saved to various formats (CSV, Excel, etc.)</li> </ul>"},{"location":"guide/RawDataReader/","title":"RawDataReader Documentation","text":""},{"location":"guide/RawDataReader/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Installation</li> <li>Basic Usage</li> <li>Examples</li> <li>Output Files</li> <li>Function Signature</li> <li>Supported Instruments</li> <li>API Reference</li> </ul>"},{"location":"guide/RawDataReader/#overview","title":"Overview","text":"<p>RawDataReader is a factory function that instantiates the appropriate reader module for a given instrument and returns the processed data over a specified time range.</p>"},{"location":"guide/RawDataReader/#installation","title":"Installation","text":"<pre><code>from pathlib import Path\nfrom datetime import datetime\nfrom AeroViz import RawDataReader\n</code></pre>"},{"location":"guide/RawDataReader/#basic-usage","title":"Basic Usage","text":"<p>Here are several scenarios showcasing different ways to use <code>RawDataReader</code>:</p> <pre><code>data = RawDataReader(\n  instrument='AE33',\n  path=Path('/path/to/data'),\n  start=datetime(2024, 2, 1),\n  end=datetime(2024, 8, 31),\n  mean_freq='1h'\n)\n</code></pre>"},{"location":"guide/RawDataReader/#examples","title":"Examples","text":""},{"location":"guide/RawDataReader/#scenario-1-basic-usage-with-neph-instrument","title":"Scenario 1: Basic Usage with NEPH Instrument","text":"<pre><code>neph_data = RawDataReader(\n    instrument='NEPH',\n    path=Path('/path/to/your/data/folder'),\n    reset=True,\n    start=datetime(2024, 2, 1),\n    end=datetime(2024, 4, 30),\n    mean_freq='1h'\n)\n</code></pre>"},{"location":"guide/RawDataReader/#console-output","title":"Console Output","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551     Reading NEPH RAW DATA from 2024-02-01 00:00:00 to 2024-04-30 23:59:59      \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u25b6 Reading NEPH files \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:00 file_name.dat\n        \u25b6 Scatter Coe. (550 nm)\n            \u251c\u2500 Sample Rate    :   100.0%\n            \u251c\u2500 Valid  Rate    :   100.0%\n            \u2514\u2500 Total  Rate    :   100.0%\n</code></pre> <p>Expected Output:</p> <ul> <li>Hourly averaged NEPH data for the entire year.</li> <li>Will include scattering coefficients and other NEPH-related metrics.</li> </ul>"},{"location":"guide/RawDataReader/#scenario-2-ae33-with-quality-control-and-rate-calculation","title":"Scenario 2: AE33 with Quality Control and Rate Calculation","text":"<pre><code>ae33_data = RawDataReader(\n    instrument='AE33',\n    path=Path('/path/to/your/data/folder'),\n    reset=True,\n    qc='1MS',  # print qc each month\n    start=datetime(2024, 1, 1),\n    end=datetime(2024, 8, 31),\n    mean_freq='1h',\n)\n</code></pre>"},{"location":"guide/RawDataReader/#console-output_1","title":"Console Output","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551     Reading AE33 RAW DATA from 2024-02-01 00:00:00 to 2024-05-31 23:59:59      \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u25b6 Reading AE33 files \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:00 AE33_AE33-S07-00599_20240225.dat\n     AE33_AE33-S07-00599_20240704.dat may not be a whole daily data. Make sure the file is correct.  # some warming or \n     AE33_AE33-S07-00599_20240711.dat may not be a whole daily data. Make sure the file is correct.  # error print\n    \u25b6 Processing: 2024-02-01 to 2024-02-29\n        \u25b6 BC Mass Conc. (880 nm)\n            \u251c\u2500 Sample Rate    :   26.3%\n            \u251c\u2500 Valid  Rate    :   99.5%\n            \u2514\u2500 Total  Rate    :   26.1%\n    \u25b6 Processing: 2024-03-01 to 2024-03-31\n        \u25b6 BC Mass Conc. (880 nm)\n            \u251c\u2500 Sample Rate    :  100.0%\n            \u251c\u2500 Valid  Rate    :  100.0%\n            \u2514\u2500 Total  Rate    :  100.0%\n    \u25b6 Processing: 2024-04-01 to 2024-04-30\n        \u25b6 BC Mass Conc. (880 nm)\n            \u251c\u2500 Sample Rate    :  100.0%\n            \u251c\u2500 Valid  Rate    :  100.0%\n            \u2514\u2500 Total  Rate    :  100.0%\n    \u25b6 Processing: 2024-05-01 to 2024-05-31\n        \u25b6 BC Mass Conc. (880 nm)\n            \u251c\u2500 Sample Rate    :  100.0%\n            \u251c\u2500 Valid  Rate    :  100.0%\n            \u2514\u2500 Total  Rate    :  100.0%\n</code></pre> <p>Expected Output:</p> <ul> <li>Hourly AE33 data with quality control applied monthly.</li> <li>Includes black carbon concentrations and absorption coefficients.</li> <li>Will generate a CSV file with the processed data.</li> </ul>"},{"location":"guide/RawDataReader/#scenario-3-smps-with-specific-time-range","title":"Scenario 3: SMPS with Specific Time Range","text":"<pre><code>smps_data = RawDataReader(\n    instrument='SMPS',\n    path=Path('/path/to/your/data/folder'),\n    start=datetime(2024, 2, 1),\n    end=datetime(2024, 8, 31),\n    mean_freq='30min',\n    size_range=(11.8, 593.5)  # user input size range\n)\n</code></pre>"},{"location":"guide/RawDataReader/#console-output_2","title":"Console Output","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551     Reading SMPS RAW DATA from 2024-02-01 00:00:00 to 2024-08-31 23:59:59      \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u25b6 Reading SMPS files \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:00 240817.txt\n    SMPS file: 240816.txt is not match the default size range (11.8, 593.5), it is (11.0, 593.5)  # print the unmatch file\n        \u25b6 Bins\n            \u251c\u2500 Sample Rate    :    1.7%\n            \u251c\u2500 Valid  Rate    :   93.3%\n            \u2514\u2500 Total  Rate    :    1.6%\n</code></pre> <p>Expected Output:</p> <ul> <li>SMPS data for the summer months (June to August).</li> <li>30-minute averaged data points.</li> <li>Includes particle size distribution information.</li> </ul>"},{"location":"guide/RawDataReader/#output-files","title":"Output Files","text":"<p>After processing, six files will be generated in the <code>{instrument}_outputs</code> directory:</p> <ol> <li><code>_read_{instrument}_raw.csv</code>: Merged raw data with original time resolution</li> <li><code>_read_{instrument}_raw.pkl</code>: Raw data in pickle format</li> <li><code>_read_{instrument}.csv</code>: Quality controlled data</li> <li><code>_read_{instrument}.pkl</code>: QC data in pickle format</li> <li><code>Output_{instrument}</code>: Final processed data file</li> <li><code>{instrument}.log</code>: Processing log file</li> </ol>"},{"location":"guide/RawDataReader/#function-signature","title":"Function Signature","text":"<pre><code>def RawDataReader(\n        instrument: str,\n        path: Path | str,\n        reset: bool | str = False,\n        qc: bool | str = True,\n        start: datetime = None,\n        end: datetime = None,\n        mean_freq: str = '1h',\n) -&gt; DataFrame:\n</code></pre>"},{"location":"guide/RawDataReader/#parameters","title":"Parameters","text":"<ul> <li><code>instrument</code> (str): Name of the instrument (e.g., 'NEPH', 'AE33', 'SMPS')</li> <li><code>path</code> (Path | str): Directory path where raw data files are stored</li> <li><code>reset</code> (bool | str, default=False):<ul> <li><code>True</code>: Force reprocess all data</li> <li><code>False</code>: Use existing processed data if available</li> <li><code>'append'</code>: Add new data to existing processed data</li> </ul> </li> <li><code>qc</code> (bool | str, default=True):<ul> <li><code>True</code>: Apply default quality control</li> <li><code>False</code>: Skip QC</li> <li><code>str</code>: QC frequency (e.g., '1M', '1W')</li> </ul> </li> <li><code>start</code> (datetime): Start date for processing</li> <li><code>end</code> (datetime): End date for processing</li> <li><code>mean_freq</code> (str, default='1h'): Frequency for data averaging</li> </ul>"},{"location":"guide/RawDataReader/#raises","title":"Raises","text":"<ul> <li>ValueError: If instrument is invalid</li> <li>ValueError: If path doesn't exist</li> <li>ValueError: If QC frequency is invalid</li> <li>ValueError: If start/end times are invalid</li> <li>ValueError: If mean_freq is invalid</li> </ul>"},{"location":"guide/RawDataReader/#returns","title":"Returns","text":"<ul> <li>DataFrame: An instance of the reader module corresponding to the specified instrument, which processes the data and   returns it in a usable format.</li> </ul>"},{"location":"guide/RawDataReader/#supported-instruments","title":"Supported Instruments","text":""},{"location":"guide/RawDataReader/#the-aeroviz-project-currently-supports-data-from-the-following-instruments","title":"The AeroViz project currently supports data from the following instruments:","text":"Instrument Time Resolution File Type Display Columns QAQC method NEPH (Nephelometer) 5min .dat G default Aurora (Nephelometer) 1min .csv G default SMPS (Scanning Mobility Particle Sizer) 6min .txt, .csv all default GRIMM (GRIMM Aerosol Technik) 6min .dat all default APS_3321 (Aerodynamic Particle Sizer) 6min .txt all default AE33 (Aethalometer Model 33) 1min .dat BC6 default AE43 (Aethalometer Model 43) 1min .dat BC6 default BC1054 (Black Carbon Monitor 1054) 1min .csv BC9 default MA350 (MicroAeth MA350) 1min .csv BC5 default BAM1020 (Beta Attenuation Mass Monitor) 1h .csv Conc default TEOM (Continuous Ambient Particulate Monitor) 6min .csv PM_Total, PM_NV default OCEC (Sunset Organic Carbon Elemental Carbon Analyzer) 1h *LCRes.csv Thermal_OC, Thermal_EC, Optical_OC, Optical_EC default IGAC (In-situ Gas and Aerosol Compositions monitor) 1h .csv Na+, NH4+, K+, Mg2+, Ca2+, Cl-, NO2-, NO3-, SO42- default XRF (X-ray Fluorescence Spectrometer) 1h .csv Al, Si, P, S, Cl, K, Ca, Ti, V, Cr, Mn, Fe, Ni, Cu... default VOC (Volatile Organic Compounds Monitor) 1h .csv voc default EPA 1h .csv all default Minion 1h .csv, .xlsx Na+, NH4+, Cl-, NO3-, SO42-, Al, Ti, V, Cr, Mn, Fe default <pre><code>Notes:\n1. For VOC, due to the numerous display columns, we've simply noted \"voc\" in the table. In reality, it includes many specific VOC compound names.\n2. For instruments marked with \"all\", it means all available columns or intervals are displayed.\n3. The display columns for XRF include a large number of element names, all of which are listed.\n4. The file types for AE33 and AE43 actually have more specific patterns, but are simplified to \".dat\" in this table.\n</code></pre>"},{"location":"guide/RawDataReader/#api-reference","title":"API Reference","text":""},{"location":"guide/RawDataReader/#abstractreader-class","title":"AbstractReader Class","text":"<p>Base class for reading raw data from different instruments.</p> <pre><code>class AbstractReader(ABC):\n  def __init__(self,\n               path: Path | str,\n               reset: bool | str = False,\n               qc: bool | str = True):\n    pass\n</code></pre>"},{"location":"guide/RawDataReader/#abstract-methods","title":"Abstract Methods","text":"<ul> <li><code>_raw_reader(self, file)</code>: Implement in child classes to read raw data files</li> <li><code>_QC(self, df: DataFrame) -&gt; DataFrame</code>: Implement in child classes for quality control</li> </ul>"},{"location":"guide/RawDataReader/#key-methods","title":"Key Methods","text":"<ul> <li><code>__call__(self, start: datetime, end: datetime, mean_freq: str = '1h') -&gt; DataFrame</code>: Process data for specified time   range</li> </ul> <pre><code>def __call__(self,\n             start: datetime,\n             end: datetime,\n             mean_freq: str = '1h',\n             ) -&gt; DataFrame:\n</code></pre> <ul> <li><code>_timeIndex_process(self, _df, user_start=None, user_end=None, append_df=None)</code>: Process time index and resampling</li> <li><code>_outlier_process(self, _df)</code>: Process outliers</li> <li><code>_save_data(self, raw_data: DataFrame, qc_data: DataFrame) -&gt; None</code>: Save data to files</li> <li><code>_read_raw_files(self) -&gt; tuple[DataFrame | None, DataFrame | None]</code>: Read and process raw files</li> </ul>"},{"location":"guide/RawDataReader/#static-methods","title":"Static Methods","text":"<ul> <li><code>reorder_dataframe_columns(df, order_lists, others_col=False)</code>: Reorder DataFrame columns</li> <li><code>n_sigma_QC(df: DataFrame, std_range: int = 5) -&gt; DataFrame</code>: Perform n-sigma quality control</li> <li><code>IQR_QC(df: DataFrame, log_dist=False) -&gt; tuple[DataFrame, DataFrame]</code>: Perform IQR quality control</li> </ul>"},{"location":"guide/getting-started/","title":"Getting Started with AeroViz","text":""},{"location":"guide/getting-started/#installation","title":"Installation","text":"<p>You can install AeroViz using pip:</p> <pre><code>pip install AeroViz\n</code></pre>"},{"location":"guide/getting-started/#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of how to use AeroViz:</p> <pre><code>from datetime import datetime\nfrom pathlib import Path\nfrom AeroViz import RawDataReader, DataProcess, plot\n\n# Read data from a supported instrument\ndata = RawDataReader(\n    instrument='AE33',\n    path=Path('/path/to/data'),\n    start=datetime(2024, 1, 1),\n    end=datetime(2024, 12, 31)\n)\n\n# Process the data\nprocessor = DataProcess(data)\nprocessed_data = processor.process()\n\n# Create visualization\nplot.time_series(processed_data, 'BC')\n</code></pre>"},{"location":"guide/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about RawDataReader</li> <li>Explore DataProcess functionality</li> <li>Check out Plot capabilities</li> <li>Browse supported instruments </li> </ul>"},{"location":"guide/plot/","title":"Plot Documentation","text":""},{"location":"guide/plot/#overview","title":"Overview","text":"<p>The plot module provides visualization tools for creating publication-quality plots of aerosol data. It includes various plot types commonly used in aerosol science.</p>"},{"location":"guide/plot/#basic-usage","title":"Basic Usage","text":"<pre><code>from AeroViz import plot\n\n# Create a time series plot\nplot.time_series(data, 'BC')\n\n# Create a scatter plot\nplot.scatter(data, 'BC', 'PM2.5')\n</code></pre>"},{"location":"guide/plot/#available-plot-types","title":"Available Plot Types","text":""},{"location":"guide/plot/#time_series","title":"time_series()","text":"<p>Create a time series plot of specified variables.</p> <pre><code>plot.time_series(\n    data,\n    variables=['BC', 'PM2.5'],\n    start='2024-01-01',\n    end='2024-12-31',\n    title='Time Series of BC and PM2.5'\n)\n</code></pre>"},{"location":"guide/plot/#scatter","title":"scatter()","text":"<p>Create a scatter plot of two variables.</p> <pre><code>plot.scatter(\n    data,\n    x='BC',\n    y='PM2.5',\n    color='PM2.5',\n    size='BC'\n)\n</code></pre>"},{"location":"guide/plot/#box","title":"box()","text":"<p>Create a box plot of specified variables.</p> <pre><code>plot.box(\n    data,\n    variables=['BC', 'PM2.5'],\n    by='month'\n)\n</code></pre>"},{"location":"guide/plot/#histogram","title":"histogram()","text":"<p>Create a histogram of specified variables.</p> <pre><code>plot.histogram(\n    data,\n    variables=['BC'],\n    bins=50\n)\n</code></pre>"},{"location":"guide/plot/#parameters","title":"Parameters","text":""},{"location":"guide/plot/#common-parameters","title":"Common Parameters","text":"<ul> <li><code>data</code> (DataFrame): Input data</li> <li><code>variables</code> (list): Variables to plot</li> <li><code>title</code> (str): Plot title</li> <li><code>figsize</code> (tuple): Figure size</li> <li><code>style</code> (str): Plot style</li> </ul>"},{"location":"guide/plot/#time-series-parameters","title":"Time Series Parameters","text":"<ul> <li><code>start</code> (str): Start date</li> <li><code>end</code> (str): End date</li> <li><code>freq</code> (str): Time frequency</li> </ul>"},{"location":"guide/plot/#scatter-parameters","title":"Scatter Parameters","text":"<ul> <li><code>x</code> (str): X-axis variable</li> <li><code>y</code> (str): Y-axis variable</li> <li><code>color</code> (str): Color variable</li> <li><code>size</code> (str): Size variable</li> </ul>"},{"location":"guide/plot/#examples","title":"Examples","text":""},{"location":"guide/plot/#time-series-with-multiple-variables","title":"Time Series with Multiple Variables","text":"<pre><code>plot.time_series(\n    data,\n    variables=['BC', 'PM2.5', 'PM10'],\n    start='2024-01-01',\n    end='2024-12-31',\n    title='Aerosol Components Time Series'\n)\n</code></pre>"},{"location":"guide/plot/#scatter-plot-with-color-and-size","title":"Scatter Plot with Color and Size","text":"<pre><code>plot.scatter(\n    data,\n    x='BC',\n    y='PM2.5',\n    color='PM10',\n    size='PM1',\n    title='BC vs PM2.5'\n)\n</code></pre>"},{"location":"guide/plot/#box-plot-by-month","title":"Box Plot by Month","text":"<pre><code>plot.box(\n    data,\n    variables=['BC'],\n    by='month',\n    title='Monthly BC Distribution'\n)\n</code></pre>"},{"location":"guide/plot/#notes","title":"Notes","text":"<ul> <li>All plots are customizable with various parameters</li> <li>Plots can be saved in multiple formats (PNG, PDF, etc.)</li> <li>The plot module uses matplotlib and seaborn under the hood</li> <li>Publication-quality settings are applied by default</li> </ul>"},{"location":"guide/plot/#windrose-and-conditional-bivariate-probability-function-cbpf","title":"WindRose and Conditional Bivariate Probability Function (CBPF)","text":"<pre><code>from AeroViz import plot, DataBase\n\ndf = DataBase()  # build default data, uers can use their own data\n\n# wind rose\nplot.meteorology.wind_rose(df, 'WS', 'WD', typ='bar')\nplot.meteorology.wind_rose(df, 'WS', 'WD', 'PM2.5', typ='scatter')\n\nplot.meteorology.CBPF(df, 'WS', 'WD', 'PM2.5')\nplot.meteorology.CBPF(df, 'WS', 'WD', 'PM2.5', percentile=[75, 100])\n</code></pre>"},{"location":"guide/plot/#linear-regression","title":"Linear Regression","text":"<pre><code>from AeroViz import plot, DataBase\n\ndf = DataBase()  # build default data, uers can use their own data\n\n# regression\nplot.linear_regression(df, x='PM25', y='Extinction')\nplot.linear_regression(df, x='PM25', y=['Extinction', 'Scattering', 'Absorption'])\n\nplot.multiple_linear_regression(df, x=['AS', 'AN', 'OM', 'EC', 'SS', 'Soil'], y=['Extinction'])\nplot.multiple_linear_regression(df, x=['NO', 'NO2', 'CO', 'PM1'], y=['PM25'])\n</code></pre>"},{"location":"guide/plot/#timeseries","title":"Timeseries","text":"<pre><code>from AeroViz import plot, DataBase\n\ndf = DataBase()  # build default data, uers can use their own data\n\n# timeseries\nplot.timeseries.timeseries(df,\n                           y=['Extinction', 'Scattering'],\n                           color=[None, None],\n                           style=['line', 'line'],\n                           times=('2021-02-01', '2021-03-31'), ylim=[0, None], ylim2=[0, None], rolling=50,\n                           inset_kws2=dict(bbox_to_anchor=(1.12, 0, 1.2, 1)))\n\nplot.timeseries.timeseries(df, y='WS', color='WD', style='scatter', times=('2020-10-01', '2020-11-30'),\n                           scatter_kws=dict(cmap='hsv'), cbar_kws=dict(ticks=[0, 90, 180, 270, 360]),\n                           ylim=[0, None])\n\nplot.timeseries.timeseries_template(df.loc['2021-02-01', '2021-03-31'])\n</code></pre>"},{"location":"guide/plot/#particle-size-distribution","title":"Particle Size Distribution","text":"<p>[!IMPORTANT]\\ The provided code of distribution suitable for SMPS and APS data in \"dX/dlogdp\" unit. It can be converted into surface area and volume distribution. At the same time, chemical composition data can also be used to calculate particle extinction through Mie theory.</p> <p></p> <pre><code>from pathlib import Path\nfrom AeroViz import plot\nfrom AeroViz.tools import DataBase\n\ndf = DataBase() # build default data, uers can use their own data\n\nPNSD = DataBase('DEFAULT_PNSD_DATA.csv')\n\nplot.distribution.distribution.heatmap(PNSD, unit='Number')\nplot.distribution.distribution.heatmap_tms(PNSD, unit='Number', freq='60d')\n</code></pre>"},{"location":"guide/plot/#for-some-basic-plot","title":"For some basic plot","text":"Three_dimension Correlation Matrix Mutiply Linear Regression Pie &amp; Donut Dounts Scatter"},{"location":"guide/plot/#pymiescatt","title":"PyMieScatt","text":"Mie_Q Mie_MEE"},{"location":"instruments/AE33/","title":"AE33 Aethalometer","text":"<p>The AE33 is a multi-wavelength aethalometer used for measuring black carbon aerosol concentrations in the atmosphere.</p>"},{"location":"instruments/AE33/#data-format","title":"Data Format","text":"<ul> <li>File format: Tab-delimited text file (.dat)</li> <li>Sampling frequency: 1 minute</li> <li>File naming pattern: <code>[!ST|!CT|!FV]*[!log]_AE33*.dat</code></li> <li>Header: 5 rows of header information</li> <li>Data columns: 67 columns including timestamp and measurements</li> </ul>"},{"location":"instruments/AE33/#measurement-parameters","title":"Measurement Parameters","text":"<p>The AE33 provides black carbon concentration measurements at seven wavelengths:</p> <ul> <li>BC1-BC7: Black carbon concentrations at different wavelengths (ng/m\u00b3)</li> </ul>"},{"location":"instruments/AE33/#data-processing","title":"Data Processing","text":""},{"location":"instruments/AE33/#data-reading","title":"Data Reading","text":"<ul> <li>Automatically skips the first 5 rows of header information</li> <li>Parses timestamps from date and time columns (columns 0 and 1)</li> <li>Extracts black carbon concentration data for seven wavelengths</li> <li>Strips semicolons from column names</li> <li>Validates file size (warns if &lt; 550KB)</li> </ul>"},{"location":"instruments/AE33/#quality-control","title":"Quality Control","text":"<ol> <li> <p>Instrument Status Check:</p> <ul> <li>Filters data based on instrument status codes:<ul> <li>Status = 1: Tape advance (tape advance, fast calibration, warm-up)</li> <li>Status = 2: First measurement \u2013 obtaining ATN0</li> <li>Status = 3: Stopped</li> <li>Status = 4: Flow low/high by more than 0.5 LPM or F1 &lt; 0 or F2/F1 outside 0.2 \u2013 0.75 range</li> <li>Status = 16: Calibrating LED</li> <li>Status = 32: Calibration error (at least one channel OK)</li> <li>Status = 384: Tape error (tape not moving, end of tape)</li> <li>Status = 1024: Stability test</li> <li>Status = 2048: Clean air test</li> <li>Status = 4096: Optical test</li> </ul> </li> <li>Removes data points with other status codes indicating instrument problems</li> </ul> </li> <li> <p>Value Range Check:</p> <ul> <li>Removes physically impossible values (negative or &gt; 20000 ng/m\u00b3)</li> </ul> </li> <li> <p>Data Representativeness:</p> <ul> <li>Requires at least 50% of expected data points in each 1-hour window</li> <li>Ensures temporal consistency of measurements</li> </ul> </li> <li> <p>Complete Record Requirement:</p> <ul> <li>Ensures data completeness across all wavelengths</li> </ul> </li> </ol>"},{"location":"instruments/AE33/#output-data","title":"Output Data","text":"<p>The processed data contains the following columns:</p> <ul> <li>Time index: Data acquisition time</li> <li>BC1-BC7: Black carbon concentrations at seven wavelengths (ng/m\u00b3)</li> </ul>"},{"location":"instruments/AE33/#notes","title":"Notes","text":"<ul> <li>The AE33 provides real-time black carbon concentration measurements, useful for distinguishing between biomass burning   and fossil fuel combustion contributions</li> <li>Files smaller than 550KB may indicate incomplete data</li> <li>Supports data filtering based on instrument status codes</li> <li>Handles duplicate timestamps and invalid indices automatically </li> </ul>"},{"location":"instruments/AE43/","title":"AE43 Aethalometer","text":"<p>The AE43 is a multi-wavelength aethalometer used for measuring black carbon aerosol concentrations in the atmosphere.</p>"},{"location":"instruments/AE43/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: 1 minute</li> <li>File naming pattern: <code>[!ST|!CT|!FV]*[!log]_AE43*.dat</code></li> <li>Timestamp column: StartTime</li> <li>Configuration tracking: Uses SetupID for configuration management</li> </ul>"},{"location":"instruments/AE43/#measurement-parameters","title":"Measurement Parameters","text":"<p>The AE43 provides black carbon concentration measurements at seven wavelengths:</p> <ul> <li>BC1-BC7: Black carbon concentrations at different wavelengths (ng/m\u00b3)</li> </ul>"},{"location":"instruments/AE43/#data-processing","title":"Data Processing","text":""},{"location":"instruments/AE43/#data-reading","title":"Data Reading","text":"<ul> <li>Parses timestamps from the StartTime column</li> <li>Automatically identifies and selects the latest configuration data (SetupID)</li> <li>Extracts black carbon concentration data for seven wavelengths</li> <li>Groups data by SetupID to handle configuration changes</li> <li>Includes Status column for quality control</li> </ul>"},{"location":"instruments/AE43/#quality-control","title":"Quality Control","text":"<ol> <li> <p>Instrument Status Check:</p> <ul> <li>Filters data based on instrument status codes:<ul> <li>Status = 1: Tape advance (tape advance, fast calibration, warm-up)</li> <li>Status = 2: First measurement \u2013 obtaining ATN0</li> <li>Status = 3: Stopped</li> <li>Status = 4: Flow low/high by more than 0.5 LPM or F1 &lt; 0 or F2/F1 outside 0.2 \u2013 0.75 range</li> <li>Status = 16: Calibrating LED</li> <li>Status = 32: Calibration error (at least one channel OK)</li> <li>Status = 384: Tape error (tape not moving, end of tape)</li> <li>Status = 1024: Stability test</li> <li>Status = 2048: Clean air test</li> <li>Status = 4096: Optical test</li> </ul> </li> <li>Removes data points with other status codes indicating instrument problems</li> </ul> </li> <li> <p>Value Range Check:</p> <ul> <li>Removes physically impossible values (negative or &gt; 20000 ng/m\u00b3)</li> </ul> </li> <li> <p>Data Representativeness:</p> <ul> <li>Requires at least 50% of expected data points in each 1-hour window</li> <li>Ensures temporal consistency of measurements</li> </ul> </li> <li> <p>Complete Record Requirement:</p> <ul> <li>Ensures data completeness across all wavelengths</li> </ul> </li> </ol>"},{"location":"instruments/AE43/#output-data","title":"Output Data","text":"<p>The processed data contains the following columns:</p> <ul> <li>Time index: Data acquisition time</li> <li>BC1-BC7: Black carbon concentrations at seven wavelengths (ng/m\u00b3)</li> </ul>"},{"location":"instruments/AE43/#notes","title":"Notes","text":"<ul> <li>The AE43 provides real-time black carbon concentration measurements, useful for distinguishing between biomass burning   and fossil fuel combustion contributions</li> <li>Supports data filtering based on instrument status codes</li> <li>Automatically handles configuration changes and duplicate timestamps</li> <li>Maintains data integrity across configuration changes using SetupID </li> </ul>"},{"location":"instruments/APS/","title":"Aerodynamic Particle Sizer (APS)","text":"<p>The APS is an instrument used for measuring aerodynamic particle size distributions in the micrometer range.</p>"},{"location":"instruments/APS/#data-format","title":"Data Format","text":"<ul> <li>File format: Tab-delimited text file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.txt</code></li> <li>Data structure:<ul> <li>Header: 6 rows of metadata</li> <li>Time columns: Date and Start Time</li> <li>Size distribution data: Columns 3-54</li> </ul> </li> </ul>"},{"location":"instruments/APS/#measurement-parameters","title":"Measurement Parameters","text":"<p>The APS provides aerodynamic particle size distribution measurements:</p> <ul> <li>Size range: 542-1981 nm</li> <li>Output: Number concentration for each size bin</li> <li>Total particle concentration (particles/cm\u00b3)</li> </ul>"},{"location":"instruments/APS/#data-processing","title":"Data Processing","text":""},{"location":"instruments/APS/#data-reading","title":"Data Reading","text":"<ul> <li>Automatically skips header rows</li> <li>Parses date and time into datetime index</li> <li>Extracts particle size distribution data</li> <li>Rounds size bin values to 4 decimal places</li> <li>Validates datetime values</li> </ul>"},{"location":"instruments/APS/#quality-control","title":"Quality Control","text":"<ul> <li>Ensures temporal data completeness (minimum 5 measurements/hour)</li> <li>Applies total concentration thresholds (1-700 particles/cm\u00b3)</li> <li>Calculates total concentration with logarithmic bin spacing</li> <li>Removes invalid measurements</li> </ul>"},{"location":"instruments/APS/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>Size bins: Number concentration for each particle size</li> <li>Total concentration: Integrated particle number concentration</li> </ul>"},{"location":"instruments/APS/#notes","title":"Notes","text":"<ul> <li>Measures aerodynamic particle diameter directly</li> <li>Complementary to SMPS for larger particle sizes</li> <li>Size range approximately 0.5-20 \u03bcm</li> <li>Logarithmic bin spacing in size distribution </li> </ul>"},{"location":"instruments/Aurora/","title":"Aurora Integrating Nephelometer","text":"<p>The Aurora is an integrating nephelometer used for measuring light scattering properties of aerosols at multiple wavelengths.</p>"},{"location":"instruments/Aurora/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: 1 minute</li> <li>File naming pattern: <code>*.csv</code></li> <li>Timestamp column: Date / time local</li> <li>Column naming conventions:<ul> <li>UV BCc, Blue BCc, Green BCc, Red BCc, IR BCc</li> <li>Biomass BCc, Fossil fuel BCc</li> <li>Delta-C, AAE, BB (%)</li> </ul> </li> </ul>"},{"location":"instruments/Aurora/#measurement-parameters","title":"Measurement Parameters","text":"<p>The Aurora provides measurements at multiple wavelengths and source apportionment:</p> <ul> <li>B, G, R: Total scattering coefficients at blue, green, and red wavelengths (Mm\u207b\u00b9)</li> <li>BB, BG, BR: Backscattering coefficients at blue, green, and red wavelengths (Mm\u207b\u00b9)</li> <li>BB mass: Biomass burning BC mass concentration (ng/m\u00b3)</li> <li>FF mass: Fossil fuel BC mass concentration (ng/m\u00b3)</li> <li>Delta-C: Difference between UV and IR channels (ng/m\u00b3)</li> <li>AAE: Absorption \u00c5ngstr\u00f6m Exponent</li> <li>BB: Biomass burning percentage (%)</li> </ul>"},{"location":"instruments/Aurora/#data-processing","title":"Data Processing","text":""},{"location":"instruments/Aurora/#data-reading","title":"Data Reading","text":"<ul> <li>Parses timestamps from 'Date / time local' column</li> <li>Standardizes column names for consistent output</li> <li>Converts all measurement values to numeric format</li> <li>Handles different column naming conventions</li> <li>Maps wavelength-specific BC concentrations to standardized names</li> </ul>"},{"location":"instruments/Aurora/#quality-control","title":"Quality Control","text":"<ul> <li>Removes physically impossible values (negative or &gt; 2000 Mm\u207b\u00b9)</li> <li>Ensures physical consistency:<ul> <li>Backscattering must be less than total scattering</li> <li>Blue &gt; Green &gt; Red (Rayleigh scattering principle)</li> </ul> </li> <li>Applies time-aware IQR filtering with 1-hour windows</li> <li>Ensures data completeness across all channels</li> </ul>"},{"location":"instruments/Aurora/#output-data","title":"Output Data","text":"<p>The processed data contains the following columns:</p> <ul> <li>Time index: Data acquisition time</li> <li>B, G, R: Total scattering coefficients (Mm\u207b\u00b9)</li> <li>BB, BG, BR: Backscattering coefficients (Mm\u207b\u00b9)</li> <li>BB mass: Biomass burning BC (ng/m\u00b3)</li> <li>FF mass: Fossil fuel BC (ng/m\u00b3)</li> <li>Delta-C: UV-IR difference (ng/m\u00b3)</li> <li>AAE: Absorption \u00c5ngstr\u00f6m Exponent</li> <li>BB: Biomass burning percentage (%)</li> </ul>"},{"location":"instruments/Aurora/#notes","title":"Notes","text":"<ul> <li>Provides real-time measurement of black carbon concentrations with source apportionment</li> <li>Distinguishes between fossil fuel combustion and biomass burning contributions</li> <li>Maintains physical consistency between measurements</li> <li>Automatically handles different column naming conventions </li> </ul>"},{"location":"instruments/BC1054/","title":"Multi-wavelength Aethalometer (BC1054)","text":"<p>The BC1054 is a multi-wavelength aethalometer that measures black carbon concentrations at up to ten different wavelengths.</p>"},{"location":"instruments/BC1054/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.csv</code></li> <li>Data structure:<ul> <li>Datetime index</li> <li>BC1-BC10 columns with units (ng/m\u00b3)</li> <li>Status column for instrument state</li> </ul> </li> </ul>"},{"location":"instruments/BC1054/#measurement-parameters","title":"Measurement Parameters","text":"<p>The BC1054 provides black carbon measurements:</p> <ul> <li>BC1-BC10: Black carbon concentrations at different wavelengths (ng/m\u00b3)</li> </ul>"},{"location":"instruments/BC1054/#data-processing","title":"Data Processing","text":""},{"location":"instruments/BC1054/#data-reading","title":"Data Reading","text":"<ul> <li>Processes CSV files with datetime index</li> <li>Standardizes column names</li> <li>Maps to consistent BC1-BC10 format</li> <li>Filters based on instrument status codes</li> <li>Handles duplicate timestamps</li> </ul>"},{"location":"instruments/BC1054/#quality-control","title":"Quality Control","text":"<ol> <li> <p>Instrument Status Check:</p> <ul> <li>Filters data based on instrument status codes:<ul> <li>Status = 1: Power Failure</li> <li>Status = 2: Digital Sensor Link Failure</li> <li>Status = 4: Tape Move Failure</li> <li>Status = 8: Maintenance</li> <li>Status = 16: Flow Failure</li> <li>Status = 32: Automatic Tape Advance</li> <li>Status = 64: Detector Failure</li> <li>Status = 256: Sensor Range</li> <li>Status = 512: Nozzle Move Failure</li> <li>Status = 1024: SPI Link Failure</li> <li>Status = 2048: Calibration Audit</li> <li>Status = 65536: Tape Move</li> </ul> </li> <li>Removes data points with other status codes indicating instrument problems</li> </ul> </li> <li> <p>Value Range Check:</p> <ul> <li>Removes physically impossible values:<ul> <li>Negative concentrations</li> <li>Values &gt; 20000 ng/m\u00b3</li> </ul> </li> </ul> </li> <li> <p>Data Representativeness:</p> <ul> <li>Requires at least 50% of expected data points in each 1-hour window</li> <li>Ensures temporal consistency of measurements</li> </ul> </li> <li> <p>Complete Record Requirement:</p> <ul> <li>Ensures data completeness across all wavelengths</li> <li>Removes duplicate consecutive rows to prevent data redundancy</li> </ul> </li> </ol>"},{"location":"instruments/BC1054/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>BC1-BC10: Black carbon concentrations at each wavelength</li> <li>All measurements in ng/m\u00b3</li> </ul>"},{"location":"instruments/BC1054/#notes","title":"Notes","text":"<ul> <li>Provides real-time multi-wavelength measurements</li> <li>Enables detailed source apportionment</li> <li>Supports up to 10 wavelength channels</li> <li>Automatic tape advance system</li> <li>Status-based quality control </li> </ul>"},{"location":"instruments/GRIMM/","title":"GRIMM Aerosol Spectrometer","text":"<p>The GRIMM is an optical particle counter that measures particle size distributions across multiple size channels.</p>"},{"location":"instruments/GRIMM/#data-format","title":"Data Format","text":"<ul> <li>File format: Tab-delimited text file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern:<ul> <li><code>A407ST*.txt</code> (specific format)</li> <li>Other GRIMM formats</li> </ul> </li> <li>Data structure:<ul> <li>Header: 233 rows of metadata</li> <li>European date format (DD/MM/YYYY)</li> <li>Size distribution channels (columns 11-127/128)</li> </ul> </li> </ul>"},{"location":"instruments/GRIMM/#measurement-parameters","title":"Measurement Parameters","text":"<p>The GRIMM provides:</p> <ul> <li>Size range: 0.25 to 32 \u03bcm</li> <li>Resolution: Multiple size channels</li> <li>Output: Number concentration for each size bin</li> <li>Units: particles/cm\u00b3 (after scaling)</li> </ul>"},{"location":"instruments/GRIMM/#data-processing","title":"Data Processing","text":""},{"location":"instruments/GRIMM/#data-reading","title":"Data Reading","text":"<ul> <li>Processes tab-delimited files</li> <li>Handles European date format</li> <li>Extracts size distribution channels</li> <li>Applies scaling factor (1/0.035)</li> <li>Uses ISO-8859-1 encoding</li> <li>Handles different file formats</li> </ul>"},{"location":"instruments/GRIMM/#quality-control","title":"Quality Control","text":"<ul> <li>Basic file validation</li> <li>Empty file detection</li> <li>No additional QC currently implemented</li> <li>Future QC possibilities:<ul> <li>Value range checks</li> <li>Total concentration consistency</li> <li>Time-based outlier detection</li> </ul> </li> </ul>"},{"location":"instruments/GRIMM/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>Size channels: Number concentration for each bin</li> <li>All measurements in particles/cm\u00b3</li> </ul>"},{"location":"instruments/GRIMM/#notes","title":"Notes","text":"<ul> <li>High resolution size information</li> <li>Wide size range coverage</li> <li>Multiple size channels</li> <li>Standard scaling factor applied</li> <li>European date format support </li> </ul>"},{"location":"instruments/IGAC/","title":"In-situ Gas and Aerosol Composition Monitor (IGAC)","text":"<p>The IGAC monitor provides real-time measurements of water-soluble inorganic ions in particulate matter.</p>"},{"location":"instruments/IGAC/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.csv</code></li> <li>Data structure:<ul> <li>Datetime index</li> <li>Ion concentration columns</li> <li>PM2.5 mass concentration</li> <li>Special values: '-' treated as NA</li> </ul> </li> </ul>"},{"location":"instruments/IGAC/#measurement-parameters","title":"Measurement Parameters","text":"<p>The IGAC provides measurements of:</p> <ul> <li>Cations:<ul> <li>Sodium (Na+)</li> <li>Ammonium (NH4+)</li> <li>Potassium (K+)</li> <li>Magnesium (Mg2+)</li> <li>Calcium (Ca2+)</li> </ul> </li> <li>Anions:<ul> <li>Chloride (Cl-)</li> <li>Nitrite (NO2-)</li> <li>Nitrate (NO3-)</li> <li>Phosphate (PO43-)</li> <li>Sulfate (SO42-)</li> </ul> </li> </ul>"},{"location":"instruments/IGAC/#data-processing","title":"Data Processing","text":""},{"location":"instruments/IGAC/#data-reading","title":"Data Reading","text":"<ul> <li>Processes CSV files with datetime index</li> <li>Handles special values as NA</li> <li>Standardizes column names</li> <li>Converts measurements to numeric format</li> <li>Removes duplicate timestamps</li> </ul>"},{"location":"instruments/IGAC/#quality-control","title":"Quality Control","text":"<ul> <li>Applies minimum detection limits (MDL):<ul> <li>Na+: 0.06 \u03bcg/m\u00b3</li> <li>NH4+: 0.05 \u03bcg/m\u00b3</li> <li>K+: 0.05 \u03bcg/m\u00b3</li> <li>Mg2+: 0.12 \u03bcg/m\u00b3</li> <li>Ca2+: 0.07 \u03bcg/m\u00b3</li> <li>Cl-: 0.07 \u03bcg/m\u00b3</li> <li>NO2-: 0.05 \u03bcg/m\u00b3</li> <li>NO3-: 0.11 \u03bcg/m\u00b3</li> <li>SO42-: 0.08 \u03bcg/m\u00b3</li> </ul> </li> <li>Verifies total ion mass &lt; PM2.5 mass</li> <li>Ensures presence of main ions (NH4+, SO42-, NO3-)</li> <li>Applies log-transformed IQR filtering</li> <li>Validates ion balance (cation/anion ratio)</li> <li>Applies lower exclusion thresholds</li> </ul>"},{"location":"instruments/IGAC/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>Ion concentrations: All measured ions in \u03bcg/m\u00b3</li> <li>Quality-controlled measurements</li> <li>Validated ion balance</li> </ul>"},{"location":"instruments/IGAC/#notes","title":"Notes","text":"<ul> <li>Critical for secondary inorganic aerosol analysis</li> <li>Significant contributor to PM2.5 mass</li> <li>Comprehensive quality control procedures</li> <li>Ion balance validation</li> <li>Main ion species monitoring </li> </ul>"},{"location":"instruments/MA350/","title":"MA350 Aethalometer","text":"<p>The MA350 is an advanced aethalometer that measures black carbon concentrations at multiple wavelengths and provides source apportionment between fossil fuel and biomass burning sources.</p>"},{"location":"instruments/MA350/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.csv</code></li> <li>Data structure:<ul> <li>Datetime index from 'Date / time local' column</li> <li>BC measurements at multiple wavelengths</li> <li>Source apportionment data</li> <li>Derived parameters</li> </ul> </li> </ul>"},{"location":"instruments/MA350/#measurement-parameters","title":"Measurement Parameters","text":"<p>The MA350 provides:</p> <ul> <li>Black carbon measurements at five wavelengths:<ul> <li>UV (BC1)</li> <li>Blue (BC2)</li> <li>Green (BC3)</li> <li>Red (BC4)</li> <li>IR (BC5)</li> </ul> </li> <li>Source apportionment:<ul> <li>Biomass burning BC mass (BB mass)</li> <li>Fossil fuel BC mass (FF mass)</li> </ul> </li> <li>Derived parameters:<ul> <li>Delta-C (UV-IR difference)</li> <li>AAE (Absorption \u00c5ngstr\u00f6m Exponent)</li> <li>BB (Biomass burning percentage)</li> </ul> </li> </ul>"},{"location":"instruments/MA350/#data-processing","title":"Data Processing","text":""},{"location":"instruments/MA350/#data-reading","title":"Data Reading","text":"<ul> <li>Processes CSV files with specific header structure</li> <li>Standardizes column names</li> <li>Maps wavelength-specific measurements</li> <li>Handles datetime parsing</li> <li>Converts measurements to numeric format</li> </ul>"},{"location":"instruments/MA350/#quality-control","title":"Quality Control","text":"<ol> <li> <p>Instrument Status Check:</p> <ul> <li>Filters data based on instrument status codes:<ul> <li>Status = 1: Power Failure</li> <li>Status = 2: Start up</li> <li>Status = 4: Tape advance</li> <li>Status = 16: Optical saturation</li> <li>Status = 32: Sample timing error</li> <li>Status = 128: Flow unstable</li> <li>Status = 256: Pump drive limit</li> <li>Status = 2048: System busy</li> <li>Status = 8192: Tape jam</li> <li>Status = 16384: Tape at end</li> <li>Status = 32768: Tape not ready</li> <li>Status = 65536: Tape transport not ready</li> <li>Status = 262144: Invalid date/time</li> <li>Status = 524288: Tape error</li> </ul> </li> <li>Removes data points with other status codes indicating instrument problems</li> </ul> </li> <li> <p>Value Range Check:</p> <ul> <li>Removes physically impossible values:<ul> <li>Negative concentrations</li> <li>Values &gt; 20000 ng/m\u00b3</li> </ul> </li> </ul> </li> <li> <p>Data Representativeness:</p> <ul> <li>Requires at least 50% of expected data points in each 1-hour window</li> <li>Ensures temporal consistency of measurements</li> </ul> </li> <li> <p>Complete Record Requirement:</p> <ul> <li>Ensures data completeness across all channels</li> <li>Validates source apportionment calculations</li> </ul> </li> </ol>"},{"location":"instruments/MA350/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>BC1-BC5: Black carbon at each wavelength (ng/m\u00b3)</li> <li>BB mass: Biomass burning BC (ng/m\u00b3)</li> <li>FF mass: Fossil fuel BC (ng/m\u00b3)</li> <li>Delta-C: UV-IR difference (ng/m\u00b3)</li> <li>AAE: Absorption \u00c5ngstr\u00f6m Exponent</li> <li>BB: Biomass burning percentage (%)</li> </ul>"},{"location":"instruments/MA350/#notes","title":"Notes","text":"<ul> <li>Provides real-time source apportionment</li> <li>Distinguishes between fossil fuel and biomass burning</li> <li>Multi-wavelength measurement capability</li> <li>Advanced data quality control</li> <li>Source-specific mass concentrations </li> </ul>"},{"location":"instruments/NEPH/","title":"Nephelometer (NEPH)","text":"<p>The Nephelometer is an instrument used for measuring light scattering properties of aerosols at multiple wavelengths.</p>"},{"location":"instruments/NEPH/#data-format","title":"Data Format","text":"<ul> <li>File format: Raw data file (.dat)</li> <li>Sampling frequency: 5 minutes</li> <li>File naming pattern: <code>*.dat</code></li> <li>Record types:<ul> <li>T records: Timestamp information</li> <li>D records: Scattering measurements</li> <li>Y records: Status and RH information</li> </ul> </li> </ul>"},{"location":"instruments/NEPH/#measurement-parameters","title":"Measurement Parameters","text":"<p>The Nephelometer provides measurements at three wavelengths:</p> <ul> <li>B, G, R: Total scattering coefficients at blue, green, and red wavelengths (Mm\u207b\u00b9)</li> <li>BB, BG, BR: Backscattering coefficients at blue, green, and red wavelengths (Mm\u207b\u00b9)</li> <li>RH: Relative humidity inside the nephelometer (%)</li> </ul>"},{"location":"instruments/NEPH/#data-processing","title":"Data Processing","text":""},{"location":"instruments/NEPH/#data-reading","title":"Data Reading","text":"<ul> <li>Processes different record types (T, D, Y)</li> <li>Extracts timestamp from T records</li> <li>Extracts scattering measurements from D records</li> <li>Extracts status and RH from Y records</li> <li>Converts raw scattering values to Mm\u207b\u00b9</li> <li>Handles both normal (NBXX) and total (NTXX) scattering modes</li> </ul>"},{"location":"instruments/NEPH/#quality-control","title":"Quality Control","text":"<ul> <li>Removes physically impossible values (negative or &gt; 2000 Mm\u207b\u00b9)</li> <li>Ensures physical consistency:<ul> <li>Backscattering must be less than total scattering</li> <li>Blue &gt; Green &gt; Red (Rayleigh scattering principle)</li> </ul> </li> <li>Applies time-aware IQR filtering with 1-hour windows</li> <li>Ensures data completeness across all channels</li> <li>Filters data based on instrument status codes</li> </ul>"},{"location":"instruments/NEPH/#output-data","title":"Output Data","text":"<p>The processed data contains the following columns:</p> <ul> <li>Time index: Data acquisition time</li> <li>B, G, R: Total scattering coefficients (Mm\u207b\u00b9)</li> <li>BB, BG, BR: Backscattering coefficients (Mm\u207b\u00b9)</li> <li>RH: Relative humidity (%)</li> </ul>"},{"location":"instruments/NEPH/#notes","title":"Notes","text":"<ul> <li>Provides information about aerosol optical properties and size distribution</li> <li>Supports both normal and total scattering modes</li> <li>Maintains physical consistency between measurements</li> <li>Automatically handles different record types and data formats </li> </ul>"},{"location":"instruments/OCEC/","title":"Organic Carbon/Elemental Carbon Analyzer (OC/EC)","text":"<p>The OC/EC analyzer measures carbonaceous aerosol components using thermal and optical methods.</p>"},{"location":"instruments/OCEC/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.csv</code></li> <li>Data structure:<ul> <li>Header: 3 rows of metadata</li> <li>Time column: Start Date/Time</li> <li>Carbon fraction measurements</li> <li>Sample volume information</li> </ul> </li> </ul>"},{"location":"instruments/OCEC/#measurement-parameters","title":"Measurement Parameters","text":"<p>The OC/EC analyzer provides measurements of:</p> <ul> <li>Thermal analysis:<ul> <li>Organic Carbon (Thermal_OC)</li> <li>Elemental Carbon (Thermal_EC)</li> </ul> </li> <li>Optical analysis:<ul> <li>Organic Carbon (Optical_OC)</li> <li>Elemental Carbon (Optical_EC)</li> </ul> </li> <li>Carbon fractions:<ul> <li>OC1-4: Different temperature stages</li> <li>PC: Pyrolyzed carbon</li> <li>TC: Total carbon</li> </ul> </li> </ul>"},{"location":"instruments/OCEC/#data-processing","title":"Data Processing","text":""},{"location":"instruments/OCEC/#data-reading","title":"Data Reading","text":"<ul> <li>Processes CSV files with varying header structures</li> <li>Handles 12/24 hour time formats</li> <li>Standardizes column names</li> <li>Rounds timestamps to nearest hour</li> <li>Converts raw measurements to concentration units</li> </ul>"},{"location":"instruments/OCEC/#quality-control","title":"Quality Control","text":"<ul> <li>Removes physically implausible values (&lt;-5 or &gt;100 \u03bcgC/m\u00b3)</li> <li>Applies minimum detection limits:<ul> <li>Thermal_OC: 0.3 \u03bcgC/m\u00b3</li> <li>Optical_OC: 0.3 \u03bcgC/m\u00b3</li> <li>Thermal_EC: 0.015 \u03bcgC/m\u00b3</li> <li>Optical_EC: 0.015 \u03bcgC/m\u00b3</li> </ul> </li> <li>Uses time-aware IQR filtering</li> <li>Requires valid OC measurements</li> </ul>"},{"location":"instruments/OCEC/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>Carbon measurements:<ul> <li>Thermal and optical OC/EC</li> <li>Total carbon (TC)</li> <li>Carbon fractions (OC1-4, PC)</li> </ul> </li> <li>Sample volume: Air volume sampled</li> </ul>"},{"location":"instruments/OCEC/#notes","title":"Notes","text":"<ul> <li>Provides critical information about combustion sources</li> <li>Helps identify secondary organic aerosol formation</li> <li>Combines thermal and optical analysis methods</li> <li>Standardizes output across different instrument formats </li> </ul>"},{"location":"instruments/SMPS/","title":"Scanning Mobility Particle Sizer (SMPS)","text":"<p>The SMPS is an instrument used for measuring particle size distributions in the nanometer range.</p>"},{"location":"instruments/SMPS/#data-format","title":"Data Format","text":"<ul> <li>File format:<ul> <li>.txt files (tab-delimited) from older AIM versions (8.x, 9.x)</li> <li>.csv files (comma-delimited) from newer AIM versions (10.x+)</li> </ul> </li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.txt</code> or <code>*.csv</code></li> <li>Timestamp formats:<ul> <li>mm/dd/yy HH:MM:SS (US format, older versions)</li> <li>mm/dd/yyyy HH:MM:SS (US format, newer versions)</li> <li>dd/mm/yyyy HH:MM:SS (EU format)</li> </ul> </li> </ul>"},{"location":"instruments/SMPS/#measurement-parameters","title":"Measurement Parameters","text":"<p>The SMPS provides particle size distribution measurements:</p> <ul> <li>Size range: 11.8-593.5 nm (default)</li> <li>Output: Number concentration (dN/dlogDp) for each size bin</li> <li>Total particle concentration (particles/cm\u00b3)</li> </ul>"},{"location":"instruments/SMPS/#data-processing","title":"Data Processing","text":""},{"location":"instruments/SMPS/#data-reading","title":"Data Reading","text":"<ul> <li>Automatically detects and skips header rows</li> <li>Supports multiple date formats based on AIM version</li> <li>Handles transposed data formats</li> <li>Extracts and sorts particle size columns numerically</li> <li>Validates size range against expected settings</li> </ul>"},{"location":"instruments/SMPS/#quality-control","title":"Quality Control","text":"<ul> <li>Filters by specified particle size range</li> <li>Ensures temporal data completeness (minimum 6 measurements/hour)</li> <li>Applies minimum total concentration threshold (2000 particles/cm\u00b3)</li> <li>Removes physically implausible high concentrations (&gt;1\u00d710\u2076 dN/dlogDp)</li> <li>Special filtering for large particles (&gt;400 nm exceeding 4000 dN/dlogDp)</li> </ul>"},{"location":"instruments/SMPS/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>Size bins: Number concentration for each particle size</li> <li>Total concentration: Integrated particle number concentration</li> </ul>"},{"location":"instruments/SMPS/#notes","title":"Notes","text":"<ul> <li>Different AIM software versions may produce different file formats</li> <li>Size range validation ensures data quality</li> <li>Special handling for large particle measurements</li> <li>Automatic format detection and parsing </li> </ul>"},{"location":"instruments/TEOM/","title":"TEOM Data Reading and Processing","text":"<p>The TEOM (Tapered Element Oscillating Microbalance) instrument is used for continuous monitoring of PM2.5 mass concentrations. This document details the data reading and quality control procedures implemented in the AeroViz package.</p>"},{"location":"instruments/TEOM/#supported-file-formats","title":"Supported File Formats","text":"<p>This module supports three types of TEOM data output formats:</p> <ol> <li> <p>Remote Download Format</p> <ul> <li>Identified by the 'Time Stamp' column</li> <li>Date format: 'DD - MM - YYYY HH:MM:SS'</li> <li>May contain Chinese month names requiring conversion</li> <li>Column mapping: Time Stamp \u2192 time, System status \u2192 status, PM-2.5 base MC \u2192 PM_NV,   PM-2.5 MC \u2192 PM_Total, PM-2.5 TEOM noise \u2192 noise</li> </ul> </li> <li> <p>USB Download or Auto Export Format</p> <ul> <li>Identified by the 'tmoStatusCondition_0' column</li> <li>Two possible time formats:   a) Standard: 'Date' and 'Time' columns (YYYY-MM-DD HH:MM:SS)   b) Alternative: 'time_stamp' column (similar to remote format)</li> <li>Column mapping: tmoStatusCondition_0 \u2192 status, tmoTEOMABaseMC_0 \u2192 PM_NV,   tmoTEOMAMC_0 \u2192 PM_Total, tmoTEOMANoise_0 \u2192 noise</li> </ul> </li> <li> <p>Other Formats - Not implemented, raises NotImplementedError</p> </li> </ol>"},{"location":"instruments/TEOM/#data-processing-workflow","title":"Data Processing Workflow","text":""},{"location":"instruments/TEOM/#data-standardization","title":"Data Standardization","text":"<ul> <li>Unifies column names across different data formats</li> <li>Handles various time formats, including Chinese month name conversion</li> <li>Converts all measurement values to numeric format</li> <li>Removes duplicate timestamps and invalid indices</li> </ul>"},{"location":"instruments/TEOM/#quality-control-procedures","title":"Quality Control Procedures","text":"<ol> <li>Noise threshold filtering (noise &lt; 0.01)</li> <li>Value range validation (removes negative or zero values)</li> <li>Time-based outlier detection (using 6-hour window IQR filtering)</li> <li>Temporal data completeness check (minimum 50% measurements per hour)</li> <li>Complete record requirement (both PM_NV and PM_Total columns must have values)</li> </ol>"},{"location":"instruments/TEOM/#output-data","title":"Output Data","text":"<p>The processed DataFrame contains the following standardized columns:</p> <ul> <li>PM_NV: Non-volatile PM2.5 concentration (\u00b5g/m\u00b3)</li> <li>PM_Total: Total PM2.5 concentration (\u00b5g/m\u00b3)</li> </ul>"},{"location":"instruments/TEOM/#usage-example","title":"Usage Example","text":"<pre><code>from datetime import datetime\nfrom pathlib import Path\n\nfrom AeroViz import RawDataReader\n\n# Set data path and time range\ndata_path = Path('/path/to/your/data/folder')\nstart_time = datetime(2024, 2, 1)\nend_time = datetime(2024, 3, 31, 23, 59, 59)\n\n# Read and process TEOM data\nteom_data = RawDataReader(\n    instrument='TEOM',\n    path=data_path,\n    reset=True,\n    qc='1MS',\n    start=start_time,\n    end=end_time,\n    mean_freq='1h',\n)\n\n# Show processed data\nprint(\"\\nProcessed TEOM data:\")\nprint(teom_data.head())\n</code></pre>"},{"location":"instruments/VOC/","title":"Volatile Organic Compounds Analyzer (VOC)","text":"<p>The VOC analyzer measures concentrations of various volatile organic compounds in air.</p>"},{"location":"instruments/VOC/#data-format","title":"Data Format","text":"<ul> <li>File format: CSV file</li> <li>Sampling frequency: Variable</li> <li>File naming pattern: <code>*.csv</code></li> <li>Data structure:<ul> <li>Datetime index</li> <li>VOC species columns</li> <li>Special values:<ul> <li>'-' treated as NA</li> <li>'N.D.' (Not Detected) treated as NA</li> </ul> </li> </ul> </li> </ul>"},{"location":"instruments/VOC/#measurement-parameters","title":"Measurement Parameters","text":"<p>The VOC analyzer provides:</p> <ul> <li>Multiple VOC species measurements</li> <li>Concentration data for each compound</li> <li>Supported species list required</li> <li>Species-specific detection limits</li> </ul>"},{"location":"instruments/VOC/#supported-voc-species","title":"Supported VOC Species","text":"<p>The analyzer supports the following VOC species:</p> class Species MIR MW SOAP KOH aromatic Benzene 0.72 78.11 92.9 1.22 Toluene 4.0 92.14 100.0 5.63 Ethylbenzene 3.04 106.17 111.6 7.0 m/p-Xylene 7.8 106.2 75.8 18.95 o-Xylene 7.64 106.16 95.5 13.6 alkane Ethane 0.28 30.07 0.1 0.248 Propane 0.49 44.1 0.0 1.09 Isobutane 1.23 58.12 0.0 2.12 n-Butane 1.15 58.12 0.3 2.36 Isopentane 1.45 72.15 0.2 3.6 n-Pentane 1.31 72.15 0.3 3.8 n-Hexane 1.24 86.18 0.1 5.2 n-Heptane 1.07 100.21 0.1 6.76 n-Octane 0.9 114.23 0.8 8.11 n-Nonane 0.78 128.2 1.9 9.7 n-Decane 0.68 142.29 7.0 11.0 n-Undecane 0.61 156.31 16.2 12.3 n-Dodecane 0.55 null null null alkene Ethylene 9.0 28.05 1.3 8.52 Propylene (Propene) 11.66 42.08 1.6 26.3 1-Butene 9.73 56.1 1.2 31.4 t-2-Butene 15.16 56.1 3.1 56.4 cis-2-Butene 14.24 56.1 3.6 64.0 1-Pentene 7.21 70.13 0.0 31.4 t-2-Pentene 10.56 70.13 4.0 67.0 cis-2-Pentene 10.38 70.13 3.6 65.0 1-Hexene 5.49 null null null Isoprene 10.61 68.1 1.9 100.0 alkyne Acetylene 0.95 26.04 0.1 0.85 alkane Cyclopentane 2.39 70.1 0.0 4.97 Methylcyclopentane 2.19 84.16 0.0 5.2 Cyclohexane 1.25 84.16 0.0 6.97 Methylcyclohexane 1.7 98.19 0.0 4.97 2,2-Dimethylbutane 1.17 86.17 0.0 2.23 2,3-Dimethylbutane 0.97 86.18 0.0 5.78 2-Methylpentane 1.5 86.18 0.0 5.4 3-Methylpentane 1.8 86.18 0.2 5.2 2,3-Dimethylpentane 1.34 100.2 0.4 1.5 2,4-Dimethylpentane 1.55 100.2 0.0 4.77 2-Methylhexane 1.19 100.2 0.0 5.65 3-Methylheptane 1.24 114.23 0.0 5.6 2,2,4-Trimethylpentane 1.26 114.23 0.0 3.34 2,3,4-Trimethylpentane 1.03 114.23 0.0 6.6 2-Methylheptane 1.07 114.23 0.0 7.0 3-Methylhexane 1.61 100.2 0.0 7.0 aromatic Styrene 1.73 104.15 212.3 58.0 Isopropylbenzene 2.52 120.19 95.5 6.3 n-Propylbenzene 2.03 null null null m-Ethyltoluene 7.39 120.19 100.6 11.8 p-Ethyltoluene 4.44 120.19 69.7 18.6 o-Ethyltoluene 5.59 120.19 94.8 11.9 m-Diethylbenzene 7.1 134.22 0.0 32.5 p-Diethylbenzene 4.43 134.22 0.0 32.7 1,3,5-Trimethylbenzene 11.76 120.19 13.5 56.7 1,2,4-Trimethylbenzene 8.87 120.19 20.6 32.5 1,2,3-Trimethylbenzene 11.97 120.19 43.9 32.7 1,3-Butadiene 12.61 54.1 1.8 66.6 1-Octene 3.25 112.2 null 30.0 2-Ethyltoluene 5.59 120.2 94.8 11.9 3,4-Ethyltoluene 5.92 120.2 85.2 15.2 OVOC Acetaldehyde 6.54 44.1 0.6 15.0 OVOC Acetone 0.36 58.1 0.3 0.17 OVOC Butyl Acetate 0.83 116.2 0.0 null OVOC Ethanol 1.53 46.1 0.6 3.2 OVOC Ethyl Acetate 0.63 88.1 0.1 null OVOC IPA 0.61 60.1 0.4 5.1 ClVOC 1,2-DCB 0.18 147.0 null null ClVOC 1,4-DCB 0.18 147.0 null null ClVOC PCE 0.03 165.8 null 0.16 ClVOC TCE 0.64 131.4 null 1.9 ClVOC VCM 2.83 62.5 null null"},{"location":"instruments/VOC/#species-parameters","title":"Species Parameters:","text":"<ul> <li>MIR: Maximum Incremental Reactivity</li> <li>MW: Molecular Weight</li> <li>SOAP: Secondary Organic Aerosol Potential</li> <li>KOH: Rate constant for the reaction with OH radicals</li> </ul>"},{"location":"instruments/VOC/#data-processing","title":"Data Processing","text":""},{"location":"instruments/VOC/#data-reading","title":"Data Reading","text":"<ul> <li>Processes CSV files with datetime index</li> <li>Handles special values as NA</li> <li>Standardizes column names</li> <li>Filters based on supported species list</li> <li>Warns about unsupported species</li> <li>Removes duplicate timestamps</li> </ul>"},{"location":"instruments/VOC/#quality-control","title":"Quality Control","text":"<ul> <li>Basic file validation</li> <li>No additional QC currently implemented</li> <li>Future QC possibilities:<ul> <li>Minimum detection limit filtering</li> <li>Value range checks</li> <li>Time-based outlier detection</li> <li>Correlation checks between species</li> </ul> </li> </ul>"},{"location":"instruments/VOC/#output-data","title":"Output Data","text":"<p>The processed data contains:</p> <ul> <li>Time index: Data acquisition time</li> <li>VOC species: Concentrations of supported compounds</li> <li>All measurements in standard units</li> <li>Validated species names</li> </ul>"},{"location":"instruments/VOC/#usage-example","title":"Usage Example","text":"<pre><code>from datetime import datetime as dtm\nfrom pathlib import Path\n\nfrom AeroViz.dataProcess import *\nfrom AeroViz.rawDataReader import *\n\nstart, end = dtm(2024, 2, 1), dtm(2024, 7, 31, 23)\n\npath_raw = Path('data')\npath_prcs = Path('prcs')\n\n# read data\ndt_VOC = RawDataReader('VOC', path_raw / 'VOC', reset=False, start=start, end=end)\ndt_VOC.rename(columns={'isoprene': 'Isoprene', 'm,p-Xylene': 'm/p-Xylene'}, inplace=True)\n\nvoc_prcs = DataProcess('VOC', path_out=path_prcs, excel=False, csv=True)\n\ndf = voc_prcs.VOC_basic(dt_VOC)\n</code></pre>"},{"location":"instruments/VOC/#notes","title":"Notes","text":"<ul> <li>Critical for air quality assessment</li> <li>Important for photochemical reaction studies</li> <li>Helps identify secondary organic aerosol sources</li> <li>Requires predefined species list</li> <li>Species name standardization essential</li> <li>Some species may have missing parameters (marked as \"null\")</li> <li>Analysis includes concentration, MIR, SOAP, and KOH values</li> </ul>"},{"location":"instruments/XRF/","title":"X-Ray Fluorescence Spectrometer (XRF)","text":"<p>The XRF is an instrument used for elemental analysis of particulate matter samples.</p>"},{"location":"instruments/XRF/#data-format","title":"Data Format","text":"<ul> <li>File format: To be implemented</li> <li>Sampling frequency: To be determined</li> <li>File naming pattern: To be determined</li> <li>Data structure: To be determined</li> </ul>"},{"location":"instruments/XRF/#measurement-parameters","title":"Measurement Parameters","text":"<p>The XRF provides:</p> <ul> <li>Elemental composition analysis</li> <li>Multiple element detection</li> <li>Semi-quantitative measurements</li> <li>Non-destructive analysis</li> </ul>"},{"location":"instruments/XRF/#data-processing","title":"Data Processing","text":""},{"location":"instruments/XRF/#data-reading","title":"Data Reading","text":"<ul> <li>Implementation pending</li> <li>Will handle raw XRF data files</li> <li>Will process elemental concentrations</li> <li>Will standardize output format</li> </ul>"},{"location":"instruments/XRF/#quality-control","title":"Quality Control","text":"<ul> <li>Implementation pending</li> <li>Will include:<ul> <li>Detection limits</li> <li>Calibration checks</li> <li>Data validation</li> <li>Quality flags</li> </ul> </li> </ul>"},{"location":"instruments/XRF/#output-data","title":"Output Data","text":"<p>The processed data will contain:</p> <ul> <li>Time index: Sample collection time</li> <li>Elemental concentrations</li> <li>Quality control flags</li> <li>Detection limits</li> </ul>"},{"location":"instruments/XRF/#notes","title":"Notes","text":"<ul> <li>Non-destructive elemental analysis</li> <li>Multiple element detection capability</li> <li>Semi-quantitative measurements</li> <li>Requires proper calibration</li> <li>Implementation in progress </li> </ul>"},{"location":"instruments/instrument_overview/","title":"\u5100\u5668\u6587\u6a94","text":"<p>\u672c\u7bc0\u63d0\u4f9b AeroViz \u652f\u6301\u7684\u5404\u7a2e\u6c23\u6eb6\u81a0\u6e2c\u91cf\u5100\u5668\u7684\u8a73\u7d30\u6587\u6a94\u3002</p>"},{"location":"instruments/instrument_overview/#_2","title":"\u652f\u6301\u7684\u5100\u5668","text":""},{"location":"instruments/instrument_overview/#_3","title":"\u9ed1\u78b3\u5100","text":"<ul> <li>AE33 Aethalometer</li> <li>AE43 Aethalometer</li> <li>BC1054 Black Carbon Monitor</li> <li>MA350 MicroAeth</li> </ul>"},{"location":"instruments/instrument_overview/#_4","title":"\u7c92\u5f91\u8b5c\u5100","text":"<ul> <li>SMPS Scanning Mobility Particle Sizer</li> <li>APS Aerodynamic Particle Sizer</li> <li>GRIMM Optical Particle Counter</li> </ul>"},{"location":"instruments/instrument_overview/#_5","title":"\u5316\u5b78\u6210\u5206\u5206\u6790\u5100","text":"<ul> <li>OCEC Organic Carbon/Elemental Carbon Analyzer</li> <li>XRF X-ray Fluorescence Spectrometer</li> <li>VOC Volatile Organic Compounds Analyzer</li> </ul>"},{"location":"instruments/instrument_overview/#_6","title":"\u5176\u4ed6\u5100\u5668","text":"<ul> <li>NEPH Nephelometer</li> <li>Aurora Spectrometer</li> <li>TEOM Tapered Element Oscillating Microbalance</li> <li>IGAC Integrated Gas and Aerosol Collector</li> </ul>"},{"location":"instruments/instrument_overview/#_7","title":"\u901a\u7528\u53c3\u6578","text":"<p>\u6240\u6709\u5100\u5668\u6578\u64da\u8655\u7406\u90fd\u9075\u5faa\u4ee5\u4e0b\u901a\u7528\u53c3\u6578\uff1a</p> <ul> <li>\u6642\u9593\u5206\u8fa8\u7387\uff1a1\u5206\u9418</li> <li>\u6578\u64da\u8cea\u91cf\u63a7\u5236\uff1a\u81ea\u52d5QC</li> <li>\u8f38\u51fa\u683c\u5f0f\uff1aCSV/Excel</li> <li>\u6642\u9593\u683c\u5f0f\uff1aISO 8601</li> </ul>"},{"location":"instruments/instrument_overview/#_8","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u78ba\u4fdd\u539f\u59cb\u6578\u64da\u6587\u4ef6\u683c\u5f0f\u6b63\u78ba</li> <li>\u6aa2\u67e5\u5100\u5668\u6821\u6e96\u72c0\u614b</li> <li>\u6ce8\u610f\u6578\u64da\u8cea\u91cf\u6a19\u8a18</li> <li>\u5b9a\u671f\u5099\u4efd\u8655\u7406\u5f8c\u7684\u6578\u64da </li> </ul>"}]}